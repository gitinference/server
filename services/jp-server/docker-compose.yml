services:
  api_prod:
    container_name: jp_api_prod
    image: ghcr.io/gitinference/gitinference/jp-api:production
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: jp_db_prod
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
    volumes:
      - ./data_prod:/app/data
    ports:
      - 6001:8000
    labels:
        - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - postgres_network
  api_staging:
    container_name: jp_api_staging
    image: ghcr.io/gitinference/gitinference/jp-api:stagging
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: jp_db_staging
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
    volumes:
      - ./data_staging:/app/data
    ports:
      - 7001:8000
    labels:
        - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - postgres_network
  django_prod:
    container_name: jp_webapp_prod
    image: ghcr.io/gitinference/gitinference/jp-webapp:prod
    environment:
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: jp_db_prod
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
      API_URL: https://api.econlabs.net/
      DEV: False
      DEBUG: False
    command: >
      sh -c "python manage.py migrate &&
             python manage.py shell -c 'from django.contrib.auth.models import User; User.objects.filter(username=\"${DJANGO_SUPERUSER_USERNAME}\").exists() or User.objects.create_superuser(\"${DJANGO_SUPERUSER_USERNAME}\", \"${DJANGO_SUPERUSER_EMAIL}\", \"${DJANGO_SUPERUSER_PASSWORD}\")' &&
             python manage.py collectstatic --noinput &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             gunicorn jp_webapp.wsgi:application --bind 0.0.0.0:8000"
    ports:
      - 6002:8000
    volumes:
      - ./data_prod:/app/data
    labels:
        - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - postgres_network
  django_staging:
    container_name: jp_webapp_staging
    image: ghcr.io/gitinference/gitinference/jp-webapp:staging
    environment:
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: jp_db_staging
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
      API_URL: https://api.econlabs.net/
      DEV: False
      DEBUG: True
    command: >
      sh -c "python manage.py migrate &&
             python manage.py shell -c 'from django.contrib.auth.models import User; User.objects.filter(username=\"${DJANGO_SUPERUSER_USERNAME}\").exists() or User.objects.create_superuser(\"${DJANGO_SUPERUSER_USERNAME}\", \"${DJANGO_SUPERUSER_EMAIL}\", \"${DJANGO_SUPERUSER_PASSWORD}\")' &&
             python manage.py collectstatic --noinput &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             gunicorn jp_webapp.wsgi:application --bind 0.0.0.0:8000"
    ports:
      - 7002:8000
    volumes:
      - ./data_staging:/app/data
    labels:
        - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - postgres_network
networks:
  postgres_network:
    external: true
